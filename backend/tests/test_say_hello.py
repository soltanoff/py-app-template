# Generated by Qodo Gen

import service


# Function returns a dictionary with a greeting message for a regular name
def test_returns_dictionary_with_greeting_message():
    # Arrange
    name = "John"

    # Act
    result = service.say_hello(name)

    # Assert
    assert isinstance(result, dict)
    assert "message" in result
    assert result["message"] == "Hello John"


# Function correctly formats the greeting with the provided name
def test_formats_greeting_with_provided_name():
    # Arrange
    name = "Alice"

    # Act
    result = service.say_hello(name)

    # Assert
    assert result["message"] == "Hello Alice"


# Function accepts and processes single-word names
def test_processes_single_word_names():
    # Arrange
    name = "Bob"

    # Act
    result = service.say_hello(name)

    # Assert
    assert result["message"] == "Hello Bob"


# Function handles multi-word names properly
def test_handles_multi_word_names():
    # Arrange
    name = "John Doe"

    # Act
    result = service.say_hello(name)

    # Assert
    assert result["message"] == "Hello John Doe"


# Function behavior with empty string input
def test_handles_empty_string_input():
    # Arrange
    name = ""

    # Act
    result = service.say_hello(name)

    # Assert
    assert result["message"] == "Hello "


# Function behavior with very long name inputs
def test_handles_very_long_name_inputs():
    # Arrange
    name = "A" * 1000

    # Act
    result = service.say_hello(name)

    # Assert
    assert result["message"] == f"Hello {'A' * 1000}"


# Function behavior with special characters in the name
def test_handles_special_characters_in_name():
    # Arrange
    name = "John@#$%^&*()_+"

    # Act
    result = service.say_hello(name)

    # Assert
    assert result["message"] == "Hello John@#$%^&*()_+"


# Function behavior with numeric characters in the name
def test_handles_numeric_characters_in_name():
    # Arrange
    name = "User123"

    # Act
    result = service.say_hello(name)

    # Assert
    assert result["message"] == "Hello User123"


# Function behavior with non-ASCII characters (Unicode, emojis)
def test_handles_non_ascii_characters():
    # Arrange
    name = "JosÃ© ðŸ˜Š"

    # Act
    result = service.say_hello(name)

    # Assert
    assert result["message"] == "Hello JosÃ© ðŸ˜Š"
